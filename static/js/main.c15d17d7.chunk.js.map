{"version":3,"sources":["Components/DisplayValue.js","Components/NumKey.js","Components/NumPad.js","logic/calculateNumber.js","App.js","logic/calculateState.js","logic/isNumber.js","serviceWorker.js","index.js"],"names":["DisplayValue","value","className","NumKey","onClick","props","name","this","Component","Numpad","calculateNumber","numOne","numTwo","operand","one","parseFloat","two","Error","App","state","total","nextNum","operator","handleClick","bind","number","buttonName","setState","test","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c15d17d7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function DisplayValue({ value }) {\n\treturn (\n\t\t<div className=\"display-num\">\n\t\t\t<h1>{value}</h1>\n\t\t</div>\n\t);\n}\n","import React, { Component } from 'react';\n\nexport default class NumKey extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName=\"btn\"\n\t\t\t\tonClick={() => this.props.onClick(this.props.name)}\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</button>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nimport NumKey from './NumKey';\n\nexport default class Numpad extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"numpad\">\n\t\t\t\t<div>\n\t\t\t\t\t<NumKey name=\"AC\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"%\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"/\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<NumKey name=\"7\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"8\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"9\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"*\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<NumKey name=\"4\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"5\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"6\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"-\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<NumKey name=\"1\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"2\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"3\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"+\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<NumKey name=\"0\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t\t<NumKey name=\"=\" onClick={name => this.props.onClick(name)} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","export default function calculateNumber(numOne, numTwo, operand) {\n\tconst one = parseFloat(numOne);\n\tconst two = parseFloat(numTwo);\n\n\tif (operand === '+') {\n\t\treturn one + two;\n\t}\n\n\tif (operand === '-') {\n\t\treturn one - two;\n\t}\n\n\tif (operand === '*') {\n\t\treturn one * two;\n\t}\n\n\tif (operand === '/') {\n\t\tif (two === 0) {\n\t\t\tthrow Error('Cannot divide by 0');\n\t\t}\n\t\treturn one / two;\n\t}\n\n\treturn Error('operand not defined');\n}\n","import React, { Component } from 'react';\n\nimport DisplayValue from './Components/DisplayValue';\nimport NumPad from './Components/NumPad';\n\nimport calculateState from './logic/calculateState';\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\ttotal: null,\n\t\t\tnextNum: null,\n\t\t\toperator: null\n\t\t};\n\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(number) {\n\t\tthis.setState(calculateState(this.state, number));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<DisplayValue value={this.state.nextNum || this.state.total || '0'} />\n\t\t\t\t<NumPad onClick={this.handleClick} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import calculateNumber from './calculateNumber';\nimport isNumber from './isNumber';\n\nexport default function calculateState(state, buttonName) {\n\t// if button 'AC' Clicked reset state\n\tif (buttonName === 'AC') {\n\t\treturn {\n\t\t\tnextNum: null,\n\t\t\ttotal: null,\n\t\t\toperator: null\n\t\t};\n\t}\n\n\t// if button '=' clicked run calculate function\n\tif (buttonName === '=') {\n\t\tif (state.nextNum && state.operator) {\n\t\t\treturn {\n\t\t\t\ttotal: calculateNumber(state.total, state.nextNum, state.operator),\n\t\t\t\tnextNum: null,\n\t\t\t\toperator: null\n\t\t\t};\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tif (isNumber(buttonName)) {\n\t\tif (buttonName === '0' && state.nextNum === '0') {\n\t\t\treturn {};\n\t\t}\n\t\t// If there is an operation, update next\n\t\tif (state.operator) {\n\t\t\tif (state.nextNum) {\n\t\t\t\treturn {\n\t\t\t\t\tnextNum: state.nextNum + buttonName\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn { nextNum: buttonName };\n\t\t}\n\t\t// // If there is no operation, update next and clear the value\n\t\tif (state.nextNum) {\n\t\t\tconst nextNum =\n\t\t\t\tstate.nextNum === '0' ? buttonName : state.nextNum + buttonName;\n\t\t\treturn {\n\t\t\t\tnextNum,\n\t\t\t\ttotal: null\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tnextNum: buttonName,\n\t\t\ttotal: null\n\t\t};\n\t}\n\n\tif (!state.nextNum) {\n\t\treturn { operator: buttonName };\n\t}\n\n\treturn {\n\t\tnextNum: null,\n\t\ttotal: state.nextNum,\n\t\toperator: buttonName\n\t};\n}\n","export default function isNumber(item) {\n\treturn /[0-9]+/.test(item);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}